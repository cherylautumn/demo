<?xml version="1.0" encoding="UTF-8"?>
<root>
	<!-- STAGE 1 -->
	<Index_Diagnoses> <!-- This is the target disease we want to mined -->
		<Diagnose>Congestive Heart Failure</Diagnose> <!-- this item has to be mapped with DeyoCCI.csv --> 
	</Index_Diagnoses>

	<target>
		<fileName>data\IMEDS\CgstHfComorbidDS\trainDS.csv</fileName>
		<columns>
			<col>ID</col>
			<col>Label</col>
			<col>Gender</col>						
			<col>Age</col>
	<!--    <col>Race</col>
			<col>Ethnicity</col>  -->		
			<col>Location</col>			
			<col>Myocardial Infarction</col>
			<col>Congestive Heart Failure</col>
			<col>Peripheral Vascular Disease</col>
			<col>Cerebrovascular Disease</col>
			<col>Dementia</col>
			<col>Chronic Pulmonary Disease</col>
			<col>Rheumatologic Disease</col>
			<col>Peptic Ulcer Disease</col>
			<col>Mild Liver Disease</col>
	 		<col>Diabetes</col> 
			<col>Diabetes with Chronic Complications</col>
			<col>Hemiplegia or Paraplegia</col>
			<col>Renal Disease</col>
			<col>Moderate or Severe Liver Disease</col>
			<col>AIDS</col>
		</columns>
	</target>
	
	<DataSetParas>
		<enable>0</enable>
		<sampleConfig>
			<sample_id>s1</sample_id>
			<sample_range>0,50000</sample_range><!-- 0,100 -->	
			<sample_label>alive</sample_label><!-- default None. alive, death, none -->
			<sample_random>true</sample_random><!-- default false -->
			<sample_append>true</sample_append> <!-- default false -->
		</sampleConfig>
		<sampleConfig>
			<sample_id>s2</sample_id>
			<sample_range>0,50000</sample_range><!-- 0,100 -->			
			<sample_label>death</sample_label><!-- alive, death, none -->
			<sample_random>true</sample_random>			
			<sample_append>true</sample_append>
		</sampleConfig>
	</DataSetParas>
	<Survivaltargets>
		<fileName>data\IMEDS\CgstHfComorbidDS\</fileName>
		<collectDates>
			<cDate>2010-10-10</cDate>
			<cDate>2005-10-10</cDate>			
		</collectDates>
		<columns>
			<col>ID</col>
			<col>obs_startDate</col>
			<col>obs_endDate</col>
			<col>death_date</col>
			<col>Period</col>
			<col>PeriodStart</col>						
			<col>PeriodEnd</col>
			<col>Censored</col>			
		</columns>
	</Survivaltargets>	
	
	<SurvivalDataSetParas>
		<enable>1</enable>
		<sampleConfig>
			<sample_range>0,5000</sample_range><!-- 0,100 -->	
			<sample_random>true</sample_random>			
			<sample_append>true</sample_append>
		</sampleConfig>
	</SurvivalDataSetParas>
	
	<!-- STAGE 2 Applying Logistic Regression to calculate outlier-->
	<PearsonResidualOutlier>
		<SparkLRmodelDataSets>
			<dataset>data\IMEDS\CgstHfComorbidDS\trainDS.csv</dataset> <!-- input the same from target filename -->		
		</SparkLRmodelDataSets>
		<SparkLRmodelParas>
			<!--<para>1,500</para>-->
			<para>1,2000</para>
		<!--	<para>1,5000</para>	
			<para>1,10000</para>				
			<para>10,500</para>
			<para>10,5000</para>
			<para>10,10000</para>-->	
					
		</SparkLRmodelParas>
		
		<inputFolder>data\IMEDS\CgstHfComorbidDS\logisticRegressionPredict</inputFolder> <!-- for PearsonResidualOutlier only, does not need to run with spark. if null, then spark don't generate tmp file-->
		<outputFolder>data\IMEDS\CgstHfComorbidDS\outlier</outputFolder>
		<threshold>-1</threshold><!-- 0: return all result. >0, filter out results which Ri lower than it. -->
		<chiSqrtThreshold>10215</chiSqrtThreshold><!-- chi-sqrt threshold, DF=n-(p+1), alpha =0.05 -->
	</PearsonResidualOutlier>
	<preSeqDS>
    	<fittedSparkLRmodels>
    		<!--<para>500_1_0</para>  1,500 para is file_id in db--> 
    		<para>5000_1_9</para>
			<para>10000_1_8</para>
    	</fittedSparkLRmodels>
    	<outlierThreshold>3.0</outlierThreshold>
    	<outputFolder>preSeq</outputFolder>	
    </preSeqDS>	
	 
	
	 
</root>